# -*- coding: utf-8 -*-
"""Final Project Telegram Bot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lmzsuMY3fbkF7ZcYM0en3UtsdFv501Ln
"""

pip install python-telegram-bot==21.1

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import make_pipeline
from sklearn.metrics import accuracy_score, classification_report

# Import dataset
df = pd.read_csv('Training.csv')
dt = pd.read_csv('Testing.csv')

# Tampilkan beberapa baris pertama untuk verifikasi data
print(df.head())

# Pisahkan fitur (X) dan label (y) dari dataset pelatihan
X = df.iloc[:, :-1].values  # Semua kolom kecuali kolom terakhir
y = df['prognosis']

# Mengubah label menjadi tipe data numerik
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

# Membagi data menjadi data latih dan data uji
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.33, random_state=42)

# Membuat pipeline dengan penskalaan fitur dan model Random Forest
pipeline = make_pipeline(StandardScaler(), RandomForestClassifier(random_state=42))

# Lakukan validasi silang untuk mengevaluasi model
cv_scores = cross_val_score(pipeline, X_train, y_train, cv=5)

print("Cross-validation scores:", cv_scores)
print("Mean CV accuracy:", cv_scores.mean())

# Melatih model pada data pelatihan
pipeline.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = pipeline.predict(X_val)

# Evaluasi hasil prediksi
accuracy = accuracy_score(y_val, y_pred)
print("Accuracy on validation set:", accuracy)

# Classification report
print(classification_report(y_val, y_pred))

import logging
import re
import pandas as pd
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# Membaca dataset
symptom_description_df = pd.read_csv('symptom_description.csv', header=None, index_col=0)
symptom_precaution_df = pd.read_csv('symptom_precaution.csv', header=None, index_col=0)

# Membuat kamus gejala dari kolom dataset pelatihan
symptom_mapping = {re.sub(r'\s+', '_', symptom.lower()): symptom for symptom in df.columns[:-1]}

def clean_symptom(symptom):
    cleaned = re.sub(r'[^\w\s]', '', symptom.lower())  # Hapus karakter khusus
    cleaned = re.sub(r'\s+', '_', cleaned)  # Ganti spasi dengan garis bawah
    mapped_symptom = symptom_mapping.get(cleaned)
    if mapped_symptom is None:
        print(f"Gejala '{symptom}' tidak ditemukan dalam dataset.")
    return mapped_symptom

# Fungsi untuk mendapatkan prediksi penyakit berdasarkan gejala
def predict_disease(symptoms):
    symptoms_vector = [1 if symptom in symptoms else 0 for symptom in df.columns[:-1]]
    predicted_index = pipeline.predict([symptoms_vector])[0]
    predicted_disease = label_encoder.inverse_transform([predicted_index])[0].strip()

    try:
        description = symptom_description_df.loc[predicted_disease, 1]
    except KeyError:
        predicted_disease = predicted_disease.strip()
        description = symptom_description_df.loc[predicted_disease, 1]

    try:
        precaution = symptom_precaution_df.loc[predicted_disease.strip()].values
    except KeyError:
        predicted_disease = predicted_disease.strip()
        precaution = symptom_precaution_df.loc[predicted_disease.strip()].values

    return predicted_disease, description, precaution

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "Halo! Saya adalah chatbot untuk prediksi penyakit berdasarkan gejala. "
        "Silakan masukkan gejala yang Anda rasakan, pisahkan dengan koma. "
        "Ketik 'selesai' jika sudah selesai."
    )
    context.user_data['symptoms'] = []

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_input = update.message.text.strip().lower()

    if user_input == 'selesai':
        symptoms = context.user_data['symptoms']
        if symptoms:
            predicted_disease, description, precaution = predict_disease(symptoms)
            symptoms_vector = [1 if symptom in symptoms else 0 for symptom in df.columns[:-1]]
            confidence = pipeline.predict_proba([symptoms_vector]).max()

            response = f"Nilai confidence: {confidence}\n"

            if confidence >= 0.8:
                response += (
                    f"Hasil akhir: Anda diduga terkena {predicted_disease}\n"
                    f"Deskripsi penyakit: {description}\n"
                    f"Tindakan pencegahan: {', '.join(precaution)}\n"
                )
            else:
                response += "Saya perlu informasi lebih lanjut. Silakan masukkan gejala tambahan."
        else:
            response = "Tidak ada gejala valid yang dimasukkan."

        await update.message.reply_text(response)
    else:
        new_symptoms = [clean_symptom(symptom.strip()) for symptom in user_input.split(',')]
        valid_symptoms = [symptom for symptom in new_symptoms if symptom]
        context.user_data['symptoms'].extend(valid_symptoms)

        current_symptoms = context.user_data['symptoms']
        await update.message.reply_text(f"Gejala saat ini: {', '.join(current_symptoms)}")

# Fungsi utama untuk menjalankan bot
async def main() -> None:
    application = ApplicationBuilder().token('Token_API_BOT_TELEGRAMMU').build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    await application.run_polling()

if __name__ == '__main__':
    import nest_asyncio
    nest_asyncio.apply()
    import asyncio
    asyncio.run(main())
