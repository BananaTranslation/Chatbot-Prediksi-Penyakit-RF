# -*- coding: utf-8 -*-
"""Program prediksi penyakit beta 9 Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11q_hO2s_lSfM03yNDzQ0t_Pi7XrfO3iW
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import make_pipeline
from sklearn.metrics import accuracy_score, classification_report

# Import dataset
df = pd.read_csv('Training.csv')
dt = pd.read_csv('Testing.csv')

print(df.head())

# Pisahkan fitur/gejala (X) dan label/nama penyakit (y) dari dataset pelatihan
X = df.iloc[:, :-1].values  # Semua kolom kecuali kolom terakhir
y = df['prognosis'] # Kolom prognosis menjadi lebel

# Mengubah label menjadi tipe data numerik
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

# Membagi data menjadi data latih dan data uji
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.33, random_state=42)

# Membuat pipeline dengan penskalaan fitur dan model Random Forest
# Pipeline dibuat untuk mengurangi kemungkinan terjadinya overfitting pada data
pipeline = make_pipeline(StandardScaler(), RandomForestClassifier(random_state=42))

# Lakukan validasi silang untuk mengevaluasi model
cv_scores = cross_val_score(pipeline, X_train, y_train, cv=5)

print("Cross-validation scores:", cv_scores)
print("Mean CV accuracy:", cv_scores.mean())

# Melatih model pada data pelatihan
pipeline.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = pipeline.predict(X_val)

# Evaluasi hasil prediksi
accuracy = accuracy_score(y_val, y_pred)
print("Accuracy on validation set:", accuracy)

# Classification report
print(classification_report(y_val, y_pred))

import re

# Membaca dataset symptom description
symptom_description_df = pd.read_csv('symptom_description.csv', header=None, index_col=0)

# Membaca dataset symptom precaution
symptom_precaution_df = pd.read_csv('symptom_precaution.csv', header=None, index_col=0)

# Menggunakan pendekatan NLP dalam input user

# Ini bertujuan agar input yang dimasukkan user sesuai dengan apa yang ada di dalam dataset
symptom_mapping = {re.sub(r'\s+', '_', symptom.lower()): symptom for symptom in df.columns[:-1]}

def clean_symptom(symptom):
    cleaned = re.sub(r'[^\w\s]', '', symptom.lower())  # Hapus karakter khusus & mengubah symptom menjadi huruf kecil
    cleaned = re.sub(r'\s+', '_', cleaned)  # Ganti spasi dengan garis bawah, ini karena pada dataset symptom dipisahkan dengan garis bawah
    mapped_symptom = symptom_mapping.get(cleaned) # Mencari gejala yang sesuai dalam dataset
    if mapped_symptom is None:
        print(f"Gejala '{symptom}' tidak ditemukan dalam dataset.")
    return mapped_symptom

# Fungsi untuk mendapatkan prediksi penyakit berdasarkan gejala
def predict_disease(symptoms):
    # Mengubah gejala menjadi vektor biner
    symptoms_vector = [1 if symptom in symptoms else 0 for symptom in df.columns[:-1]]

    # Melakukan prediksi penyakit
    predicted_index = pipeline.predict([symptoms_vector])[0]
    # Mendapatkan nama penyakit dari hasil prediksi
    predicted_disease = label_encoder.inverse_transform([predicted_index])[0].strip()  # Hapus spasi ekstra

    # Mendapatkan deskripsi gejala dari DataFrame symptom_description_df
    try:
        description = symptom_description_df.loc[predicted_disease, 1]
    except KeyError:
        # Jika nama penyakit tidak ditemukan, coba tanpa spasi ekstra
        predicted_disease = predicted_disease.strip()
        description = symptom_description_df.loc[predicted_disease, 1]

    # Mendapatkan tindakan pencegahan dari DataFrame symptom_precaution_df
    try:
        precaution = symptom_precaution_df.loc[predicted_disease.strip()].values
    except KeyError:
        # Jika nama penyakit tidak ditemukan, coba tanpa spasi ekstra
        predicted_disease = predicted_disease.strip()
        precaution = symptom_precaution_df.loc[predicted_disease.strip()].values

    # Mengembalikan nama penyakit, deskripsi gejala, dan tindakan pencegahan
    return predicted_disease, description, precaution


# Fungsi chatbot
def chatbot():
    print("Halo! Saya adalah chatbot untuk prediksi penyakit berdasarkan gejala.")
    print("Silakan masukkan gejala yang Anda rasakan, pisahkan dengan koma.")
    print("Ketik 'selesai' jika sudah selesai.")

    symptoms = []
    while True:
        user_input = input("\nGejala: ").strip().lower()

        if user_input == 'selesai':
            break

        # Memproses gejala yang dimasukkan pengguna
        new_symptoms = [clean_symptom(symptom.strip()) for symptom in user_input.split(',')]

        # Periksa dan tambahkan gejala valid saja
        valid_symptoms = []
        for symptom in new_symptoms:
            if symptom:
                valid_symptoms.append(symptom)
            else:
                print(f"Gejala '{symptom}' tidak ditemukan dalam dataset.")

        symptoms.extend(valid_symptoms)

        print(f"Gejala saat ini: {symptoms}")

        # Memprediksi penyakit berdasarkan gejala yang dimasukkan
        if symptoms:
            predicted_disease, description, precaution = predict_disease(symptoms)

            # Menampilkan hasil prediksi jika confidence sudah lebih besar dari 0.8
            symptoms_vector = [1 if symptom in symptoms else 0 for symptom in df.columns[:-1]]
            confidence = pipeline.predict_proba([symptoms_vector]).max()

            print("Nilai confidence:", confidence)

            if confidence >= 0.8:
                print("Hasil akhir: Anda diduga terkena", predicted_disease)
                print("\nDeskripsi penyakit:", description)
                print("\nTindakan pencegahan:", precaution)
                break

            # Menanyakan gejala tambahan jika prediksi tidak pasti
            if confidence < 0.8:
                print("Saya perlu informasi lebih lanjut. Silakan masukkan gejala tambahan.")

        else:
            print("Tidak ada gejala valid yang dimasukkan.")

    print("\nTerima kasih telah menggunakan layanan kami.")

# Menjalankan chatbot
chatbot()